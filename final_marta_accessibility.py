# -*- coding: utf-8 -*-
"""Final_MARTA_Accessibility.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SENzlWG2ldJ_oChksrpSE02eSHjkx3gy
"""

from google.colab import files
uploaded = files.upload()

import zipfile
import os

zip_file = 'accessibleRoutesMARTA.csv.zip'
extract_dir = '/content/unzipped_files'

#unzipping the file
with zipfile.ZipFile(zip_file, 'r') as zip_ref:
    zip_ref.extractall(extract_dir)

import pandas as pd

#loading csv file to dataframe
df = pd.read_csv('/content/unzipped_files/accessibleRoutesMARTA.csv')  # Replace with the actual extracted file name

import ipywidgets as widgets
from datetime import datetime, timedelta

import ipywidgets as widgets
import folium
import pandas as pd
from ipywidgets import interactive
from IPython.display import display, HTML
from datetime import datetime

#to ensure it becomes a string
df['route_short_name'] = df['route_short_name'].astype(str)

#creating widget for users to select between bus or train
route_type_dropdown = widgets.Dropdown(
    options=['Bus', 'Train'],
    description='Route Type:',
)

#to allow users to select route from dropdown in terms of a widget
route_dropdown = widgets.Dropdown(
    options=[],  # Start with an empty list
    description='Route:',
)

#ask users to input time in HH:MM format
arrival_time_picker = widgets.Text(
    description='Arrival Time:',
    placeholder='Enter time in HH:MM format',
)

#this part of the code adjusts the route options based on bus or train
def update_route_options(route_type):
    if route_type == 'Bus':
        # Bus routes are numeric (in string form)
        route_dropdown.options = [x for x in df['route_short_name'].unique() if x.isnumeric()]
    else:
        # Train routes are non-numeric (text-based)
        route_dropdown.options = [x for x in df['route_short_name'].unique() if x.isalpha()]

#this updates the function based on what users choose
route_type_dropdown.observe(lambda change: update_route_options(change.new), names='value')

#filters and calculates accessibility percentage
def filter_data(route_type, route_short_name):
    # Filter data based on route type (Bus or Train)
    if route_type == 'Bus':
        selected_routes = df[(df['route_short_name'] == route_short_name) & (df['route_short_name'].str.isnumeric())]
    else:
        selected_routes = df[(df['route_short_name'] == route_short_name) & (df['route_short_name'].str.isalpha())]

    #to check which stops are accessible or not
    accessible_stops = selected_routes[selected_routes['accessibility_status'] == 'Accessible']
    not_accessible_stops = selected_routes[selected_routes['accessibility_status'] != 'Accessible']

    #to calculate percentage, this does a simple calculation based on the accessible stops in a route divided by the total number of stops in a route
    total_stops = len(selected_routes)
    accessible_stop_count = len(accessible_stops)
    accessibility_percentage = (accessible_stop_count / total_stops) * 100 if total_stops > 0 else 0

    return accessible_stops, not_accessible_stops, accessibility_percentage

#this function generates routes based on accessiblity of stops
def generate_map(route_type, route_short_name, arrival_time):
    #converting user input time to a time format that could be used for comparison
    try:
        arrival_time = datetime.strptime(arrival_time, "%H:%M")
    except ValueError:
        print("Invalid time format. Please enter time in HH:MM format.")
        return

    #show accessible stops, not accessible stops and accessibility percentage of route
    accessible_stops, not_accessible_stops, accessibility_percentage = filter_data(route_type, route_short_name)

    if len(accessible_stops) > 0 or len(not_accessible_stops) > 0:
        #when map is generated, make it center on the first accessible stop
        start_lat = accessible_stops['stop_lat'].iloc[0] if len(accessible_stops) > 0 else not_accessible_stops['stop_lat'].iloc[0]
        start_lon = accessible_stops['stop_lon'].iloc[0] if len(accessible_stops) > 0 else not_accessible_stops['stop_lon'].iloc[0]
        m = folium.Map(location=[start_lat, start_lon], zoom_start=13)

        #making accessible stops green by adding green markers
        for _, stop in accessible_stops.iterrows():
            popup_content = f"Stop Name: {stop['stop_name']}<br>Accessibility Status: Accessible"
            folium.Marker(
                location=[stop['stop_lat'], stop['stop_lon']],
                popup=popup_content,
                icon=folium.Icon(color='green')
            ).add_to(m)

        #adding red markers for non-accessible stops
        for _, stop in not_accessible_stops.iterrows():
            #Potential for changing the accessibility status
            not_accessible_time_window = "Accessible from 6:00 AM to 9:00 AM"

            popup_content = f"Stop Name: {stop['stop_name']}<br>Accessibility Status: Not Accessible<br>Potentially Accessible: {not_accessible_time_window}"
            folium.Marker(
                location=[stop['stop_lat'], stop['stop_lon']],
                popup=popup_content,
                icon=folium.Icon(color='red')
            ).add_to(m)

        folium.Marker(
            location=[start_lat, start_lon],
            popup=f"Accessibility: {accessibility_percentage:.2f}%",
            icon=folium.Icon(color='blue')
        ).add_to(m)

        #display the map
        display(m)

        print(f"Accessibility Percentage: {accessibility_percentage:.2f}%")
        print(f"User Arrival Time: {arrival_time.strftime('%H:%M')}")
    else:
        print("No stops available for this route.")

update_route_options(route_type_dropdown.value)

#create the plot such that user can click on it - making it interactive
interactive_plot = interactive(generate_map,
                               route_type=route_type_dropdown,
                               route_short_name=route_dropdown,
                               arrival_time=arrival_time_picker)
output = interactive_plot.children[-1]
output.layout.height = '800px'
interactive_plot

